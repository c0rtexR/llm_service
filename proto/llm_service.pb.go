// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: proto/llm_service.proto

package llmpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// LLMRequest represents a request to an LLM provider
type LLMRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The provider to use (e.g., "openrouter", "anthropic", "openai", "gemini")
	Provider string `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	// The model to use (e.g., "gpt-4", "claude-2", etc.)
	Model string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// The messages to send to the LLM
	Messages []*ChatMessage `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
	// Whether to enable streaming of responses
	EnableStream bool `protobuf:"varint,4,opt,name=enable_stream,json=enableStream,proto3" json:"enable_stream,omitempty"`
	// Whether to enable caching (if supported by provider)
	EnableCache bool `protobuf:"varint,5,opt,name=enable_cache,json=enableCache,proto3" json:"enable_cache,omitempty"`
	// Optional parameters for model tuning
	Temperature   float32 `protobuf:"fixed32,6,opt,name=temperature,proto3" json:"temperature,omitempty"`
	MaxTokens     int32   `protobuf:"varint,7,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`
	TopP          float32 `protobuf:"fixed32,8,opt,name=top_p,json=topP,proto3" json:"top_p,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LLMRequest) Reset() {
	*x = LLMRequest{}
	mi := &file_proto_llm_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLMRequest) ProtoMessage() {}

func (x *LLMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_llm_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLMRequest.ProtoReflect.Descriptor instead.
func (*LLMRequest) Descriptor() ([]byte, []int) {
	return file_proto_llm_service_proto_rawDescGZIP(), []int{0}
}

func (x *LLMRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *LLMRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *LLMRequest) GetMessages() []*ChatMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *LLMRequest) GetEnableStream() bool {
	if x != nil {
		return x.EnableStream
	}
	return false
}

func (x *LLMRequest) GetEnableCache() bool {
	if x != nil {
		return x.EnableCache
	}
	return false
}

func (x *LLMRequest) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *LLMRequest) GetMaxTokens() int32 {
	if x != nil {
		return x.MaxTokens
	}
	return 0
}

func (x *LLMRequest) GetTopP() float32 {
	if x != nil {
		return x.TopP
	}
	return 0
}

// ChatMessage represents a single message in the conversation
type ChatMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The role of the message sender (e.g., "system", "user", "assistant")
	Role string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	// The content of the message
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// Optional cache control settings
	CacheControl  *CacheControl `protobuf:"bytes,3,opt,name=cache_control,json=cacheControl,proto3" json:"cache_control,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	mi := &file_proto_llm_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_llm_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_proto_llm_service_proto_rawDescGZIP(), []int{1}
}

func (x *ChatMessage) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *ChatMessage) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ChatMessage) GetCacheControl() *CacheControl {
	if x != nil {
		return x.CacheControl
	}
	return nil
}

// CacheControl specifies caching behavior for a message
type CacheControl struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of caching to use (e.g., "ephemeral")
	Type          string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CacheControl) Reset() {
	*x = CacheControl{}
	mi := &file_proto_llm_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CacheControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheControl) ProtoMessage() {}

func (x *CacheControl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_llm_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheControl.ProtoReflect.Descriptor instead.
func (*CacheControl) Descriptor() ([]byte, []int) {
	return file_proto_llm_service_proto_rawDescGZIP(), []int{2}
}

func (x *CacheControl) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// LLMResponse represents a final response from an LLM
type LLMResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The generated content
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Usage statistics
	Usage         *UsageInfo `protobuf:"bytes,2,opt,name=usage,proto3" json:"usage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LLMResponse) Reset() {
	*x = LLMResponse{}
	mi := &file_proto_llm_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLMResponse) ProtoMessage() {}

func (x *LLMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_llm_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLMResponse.ProtoReflect.Descriptor instead.
func (*LLMResponse) Descriptor() ([]byte, []int) {
	return file_proto_llm_service_proto_rawDescGZIP(), []int{3}
}

func (x *LLMResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *LLMResponse) GetUsage() *UsageInfo {
	if x != nil {
		return x.Usage
	}
	return nil
}

// LLMStreamResponse represents a streaming chunk of the response
type LLMStreamResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The chunk of content
	ContentChunk string `protobuf:"bytes,1,opt,name=content_chunk,json=contentChunk,proto3" json:"content_chunk,omitempty"`
	// Whether this is the final chunk
	IsFinal bool `protobuf:"varint,2,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`
	// Usage statistics (may be partial/cumulative depending on provider)
	Usage         *UsageInfo `protobuf:"bytes,3,opt,name=usage,proto3" json:"usage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LLMStreamResponse) Reset() {
	*x = LLMStreamResponse{}
	mi := &file_proto_llm_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLMStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLMStreamResponse) ProtoMessage() {}

func (x *LLMStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_llm_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLMStreamResponse.ProtoReflect.Descriptor instead.
func (*LLMStreamResponse) Descriptor() ([]byte, []int) {
	return file_proto_llm_service_proto_rawDescGZIP(), []int{4}
}

func (x *LLMStreamResponse) GetContentChunk() string {
	if x != nil {
		return x.ContentChunk
	}
	return ""
}

func (x *LLMStreamResponse) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

func (x *LLMStreamResponse) GetUsage() *UsageInfo {
	if x != nil {
		return x.Usage
	}
	return nil
}

// UsageInfo contains token usage statistics
type UsageInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PromptTokens     int32                  `protobuf:"varint,1,opt,name=prompt_tokens,json=promptTokens,proto3" json:"prompt_tokens,omitempty"`
	CompletionTokens int32                  `protobuf:"varint,2,opt,name=completion_tokens,json=completionTokens,proto3" json:"completion_tokens,omitempty"`
	TotalTokens      int32                  `protobuf:"varint,3,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`
	// Specific to Anthropic's cache
	CacheReadInputTokens     int32 `protobuf:"varint,4,opt,name=cache_read_input_tokens,json=cacheReadInputTokens,proto3" json:"cache_read_input_tokens,omitempty"`
	CacheCreationInputTokens int32 `protobuf:"varint,5,opt,name=cache_creation_input_tokens,json=cacheCreationInputTokens,proto3" json:"cache_creation_input_tokens,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *UsageInfo) Reset() {
	*x = UsageInfo{}
	mi := &file_proto_llm_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageInfo) ProtoMessage() {}

func (x *UsageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_llm_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageInfo.ProtoReflect.Descriptor instead.
func (*UsageInfo) Descriptor() ([]byte, []int) {
	return file_proto_llm_service_proto_rawDescGZIP(), []int{5}
}

func (x *UsageInfo) GetPromptTokens() int32 {
	if x != nil {
		return x.PromptTokens
	}
	return 0
}

func (x *UsageInfo) GetCompletionTokens() int32 {
	if x != nil {
		return x.CompletionTokens
	}
	return 0
}

func (x *UsageInfo) GetTotalTokens() int32 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

func (x *UsageInfo) GetCacheReadInputTokens() int32 {
	if x != nil {
		return x.CacheReadInputTokens
	}
	return 0
}

func (x *UsageInfo) GetCacheCreationInputTokens() int32 {
	if x != nil {
		return x.CacheCreationInputTokens
	}
	return 0
}

var File_proto_llm_service_proto protoreflect.FileDescriptor

var file_proto_llm_service_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6c, 0x6c, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6c, 0x6c, 0x6d, 0x2e, 0x76,
	0x31, 0x22, 0x8d, 0x02, 0x0a, 0x0a, 0x4c, 0x4c, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x13, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x5f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x74, 0x6f, 0x70,
	0x50, 0x22, 0x76, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x39,
	0x0a, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0c, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x50, 0x0a,
	0x0b, 0x4c, 0x4c, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x7c, 0x0a, 0x11, 0x4c, 0x4c, 0x4d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf6, 0x01,
	0x0a, 0x09, 0x55, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x12, 0x35, 0x0a, 0x17, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x63, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x32, 0x84, 0x01, 0x0a, 0x0a, 0x4c, 0x4c, 0x4d, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x12,
	0x12, 0x2e, 0x6c, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6c, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0c, 0x49, 0x6e,
	0x76, 0x6f, 0x6b, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x2e, 0x6c, 0x6c, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x6c, 0x6c, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x4c, 0x4d, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x1f, 0x5a,
	0x1d, 0x6c, 0x6c, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x6c, 0x6c, 0x6d, 0x2f, 0x76, 0x31, 0x3b, 0x6c, 0x6c, 0x6d, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_llm_service_proto_rawDescOnce sync.Once
	file_proto_llm_service_proto_rawDescData = file_proto_llm_service_proto_rawDesc
)

func file_proto_llm_service_proto_rawDescGZIP() []byte {
	file_proto_llm_service_proto_rawDescOnce.Do(func() {
		file_proto_llm_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_llm_service_proto_rawDescData)
	})
	return file_proto_llm_service_proto_rawDescData
}

var file_proto_llm_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_llm_service_proto_goTypes = []any{
	(*LLMRequest)(nil),        // 0: llm.v1.LLMRequest
	(*ChatMessage)(nil),       // 1: llm.v1.ChatMessage
	(*CacheControl)(nil),      // 2: llm.v1.CacheControl
	(*LLMResponse)(nil),       // 3: llm.v1.LLMResponse
	(*LLMStreamResponse)(nil), // 4: llm.v1.LLMStreamResponse
	(*UsageInfo)(nil),         // 5: llm.v1.UsageInfo
}
var file_proto_llm_service_proto_depIdxs = []int32{
	1, // 0: llm.v1.LLMRequest.messages:type_name -> llm.v1.ChatMessage
	2, // 1: llm.v1.ChatMessage.cache_control:type_name -> llm.v1.CacheControl
	5, // 2: llm.v1.LLMResponse.usage:type_name -> llm.v1.UsageInfo
	5, // 3: llm.v1.LLMStreamResponse.usage:type_name -> llm.v1.UsageInfo
	0, // 4: llm.v1.LLMService.Invoke:input_type -> llm.v1.LLMRequest
	0, // 5: llm.v1.LLMService.InvokeStream:input_type -> llm.v1.LLMRequest
	3, // 6: llm.v1.LLMService.Invoke:output_type -> llm.v1.LLMResponse
	4, // 7: llm.v1.LLMService.InvokeStream:output_type -> llm.v1.LLMStreamResponse
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_llm_service_proto_init() }
func file_proto_llm_service_proto_init() {
	if File_proto_llm_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_llm_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_llm_service_proto_goTypes,
		DependencyIndexes: file_proto_llm_service_proto_depIdxs,
		MessageInfos:      file_proto_llm_service_proto_msgTypes,
	}.Build()
	File_proto_llm_service_proto = out.File
	file_proto_llm_service_proto_rawDesc = nil
	file_proto_llm_service_proto_goTypes = nil
	file_proto_llm_service_proto_depIdxs = nil
}
